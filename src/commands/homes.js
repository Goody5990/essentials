"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const blockpos_1 = require("bdsx/bds/blockpos");
const command_1 = require("bdsx/bds/command");
const command_2 = require("bdsx/command");
const nativetype_1 = require("bdsx/nativetype");
const __1 = require("../..");
const form_1 = require("../commandUI/homesUI.js");
const message_1 = require("../utils/message.js");
const { Dimension } = require("bdsx/bds/dimension");
const fs = require('fs');
const mainConfig = require('../config/mainConfig.js');
// Home UI
if (mainConfig['homeUI']) {
    command_2.command.register("homeui", "Open home-ui menu.")
    .overload((p, o) => {
        const pl = o.getEntity();
        if (!pl) {
            message_1.send.error(`This command not for console`);
            return;
        }
        if (!pl.isPlayer()) return;
        form_1.HomeForm.menu(pl);
    }, {});
}
// Add Home
if (mainConfig['addHome']) {
    command_2.command.register("addhome", "Create a new home position.")
    .overload((p, o) => {
        const pl = o.getEntity();
        if (!pl) {
            message_1.send.error(`This command not for console`);
            return;
        }
        if (!pl.isPlayer()) return;
        form_1.HomeForm.add(pl);
    }, {})
    .overload((p, o) => {
        const pl = o.getEntity();
        if (!pl) {
            message_1.send.error(`This command not for console`);
            return;
        }
        if (!pl.isPlayer()) return;
        let pos = blockpos_1.BlockPos.create(pl.getPosition());
        __1.HomeMain.createHome(pl, p.name, pl.getDimensionId())
            .then((home) => {
                message_1.send.success(`§fSet §2${home.name}§7,§f as home.`, pl);
            })
            .catch((err) => {
                if (err) message_1.send.error(err, pl);
            });
    }, {
        name: nativetype_1.CxxString
    });
}
// Set Home
if (mainConfig['setHome']) {
    command_2.command.register("sethome", "Create a new home position.")
    .overload((p, o) => {
        const pl = o.getEntity();
        if (!pl) {
            message_1.send.error(`This command not for console`);
            return;
        }
        if (!pl.isPlayer()) return;
        let pos = blockpos_1.BlockPos.create(pl.getPosition());
        __1.HomeMain.setHome(pl, p.name, pl.getDimensionId())
            .then((home) => {
                message_1.send.success(`§fSet §2${home.name}§7,§f as home.`, pl);
            })
            .catch((err) => {
                if (err) message_1.send.error(err, pl);
            });
    }, {
        name: nativetype_1.CxxString
    });
}
// Remove Home
if (mainConfig['removeHome']) {
    command_2.command.register("removehome", "Delete your home position.")
    .overload((p, o) => {
        const pl = o.getEntity();
        if (!pl) {
            message_1.send.error(`This command not for console`);
            return;
        }
        if (!pl.isPlayer()) return;
        form_1.HomeForm.remove(pl);
    }, {})
    .overload((p, o) => {
        const pl = o.getEntity();
        if (!pl) {
            message_1.send.error(`This command not for console`);
            return;
        }
        if (!pl.isPlayer()) return;
        __1.HomeMain.deleteHome(pl, p.name)
            .then((home) => {
                message_1.send.success(`§fDeleted §2${home.name}§7.`, pl);
            })
            .catch((err) => {
                if (err) message_1.send.error(err, pl);
            });
    }, {
        name: nativetype_1.CxxString
    });
}
// Home
if (mainConfig['home']) {
    command_2.command.register("home", "Teleport to your home position.")
    .overload((p, o) => {
        const pl = o.getEntity();
        if (!pl) {
            message_1.send.error(`This command not for console`);
            return;
        }
        if (!pl.isPlayer()) return;
        form_1.HomeForm.teleport(pl);
    }, {})
    .overload((p, o) => {
        const pl = o.getEntity();
        if (!pl) {
            message_1.send.error(`This command not for console`);
            return;
        }
        if (!pl.isPlayer()) return;
        __1.HomeMain.teleport(pl, p.name);
    }, {
        name: nativetype_1.CxxString
    });
}
// List Home
if (mainConfig['listHome']) {
    command_2.command.register("listhome", "Check your homes.")
    .overload((p, o) => {
        var _a;
        const pl = o.getEntity();
        if (!pl) {
            message_1.send.error(`This command not for console`);
            return;
        }
        if (!pl.isPlayer()) return;
        pl.sendMessage(`§aHomes: §r${((_a = __1.HomeMain.getHomesName(pl)) !== null && _a !== void 0 ? _a : []).toString().replace(/,/g, "§r§a, §r")}`);
    }, {});
}

// Set Homes Limit
if (mainConfig['setHomesLimit']) {
    command_2.command.register("sethomeslimit", "Change limit player homes.", command_1.CommandPermissionLevel.Operator)
    .overload((p, o) => {
        var _a, _b;
        const pl = (_b = (_a = o.getEntity()) === null || _a === void 0 ? void 0 : _a.getNetworkIdentifier().getActor()) !== null && _b !== void 0 ? _b : undefined;
        __1.HomeMain.setDefaultLimit(p.maximum)
            .then(() => {
                message_1.send.success(`Set §r${p.maximum}§a as default homes limit`, pl);
            })
            .catch((err) => {
                if (err) message_1.send.error(err, pl);
            });
    }, {
        normal: command_2.command.enum("set_normal", "normal"),
        maximum: nativetype_1.int32_t
    })
    .overload((p, o) => {
        var _a, _b;
        const pl = (_b = (_a = o.getEntity()) === null || _a === void 0 ? void 0 : _a.getNetworkIdentifier().getActor()) !== null && _b !== void 0 ? _b : undefined;
        for (const target of p.target.newResults(o)) {
            __1.HomeMain.setHomesLimit(target, p.maximum)
                .then(() => {
                    message_1.send.success(`Set §r${p.maximum}§a as §r${target.getName()}§a homes limit`, pl);
                })
                .catch((err) => {
                    if (err) message_1.send.error(err, pl);
                });
        }
    }, {
        player: command_2.command.enum("set_player", "player"),
        target: command_1.PlayerCommandSelector,
        maximum: nativetype_1.int32_t
    });
}

//# sourceMappingURL=data:application/json;base64,